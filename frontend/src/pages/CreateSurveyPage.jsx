import React, { useState } from "react";
import DashboardLayout from "../component/DashboardLayout";
import CreateSurvey from "../component/CreateSurvey";
import CreateSurveySidebar from "../component/CreateSurveySidebar";
import Header from "../component/Header";

/**
 * CreateSurveyPage is the main layout for building a new survey.
 * It renders the sidebar, survey form, and includes the "Generate Survey with AI" feature.
 */
const CreateSurveyPage = ({ surveySeriesId = "defaultId" }) => {
  // Local state to store the survey generated by the backend (via OpenAI)
  const [generatedSurvey, setGeneratedSurvey] = useState(null);
  const [loading, setLoading] = useState(false);

  /**
   * Get API token from localStorage (or prompt once and save).
   * This avoids hard-coding the token in the source.
   */
  const getApiToken = () => {
    let token = localStorage.getItem("apiToken");
    if (!token) {
      token = window.prompt("Enter API token");
      if (token) localStorage.setItem("apiToken", token.trim());
    }
    return token?.trim();
  };

  /**
   * Triggered when the "Generate Survey with AI" button is clicked.
   * Prompts the user for a survey description, calls the backend,
   * and stores the returned survey JSON to be rendered in the form.
   */
  const handleGenerateSurvey = async () => {
    const prompt = window.prompt("Enter a short survey description:");
    if (!prompt) return; // Exit if user cancels or enters nothing

    // Fetch (or request) the auth token
    const token = getApiToken();
    if (!token) {
      alert("A valid API token is required.");
      return;
    }

    setLoading(true);
    try {
      const response = await fetch("http://localhost:8000/api/surveys/generate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`, // token from localStorage/prompt
        },
        body: JSON.stringify({ prompt: prompt.trim() }),
      });

      // Parse JSON either way so we can show server error messages too
      const maybeJson = await response
        .json()
        .catch(() => ({ error: "Non-JSON response from server" }));

      if (!response.ok) {
        // Surface clear error info for debugging
        const serverMsg =
          typeof maybeJson === "object" && maybeJson?.error
            ? JSON.stringify(maybeJson)
            : "Failed to generate survey";
        throw new Error(serverMsg);
      }

      console.log("Generated Survey:", maybeJson);
      setGeneratedSurvey(maybeJson); // Save the survey to local state
    } catch (err) {
      console.error("Error generating survey:", err);
      alert(
        `Something went wrong.\n\nDetails: ${
          err?.message || "Unknown error"
        }\n\nTip: Ensure your backend is running on port 8000 and the token is correct.`
      );
    } finally {
      setLoading(false);
    }
  };

  return (
    <DashboardLayout>
      <div className="flex flex-col w-full h-full overflow-hidden">
        {/* Header with page title and the AI button */}
        <div className="lg:min-h-[90px]">
          <Header>
            <div className="flex items-center gap-3 flex-wrap">
              <h2 className="text-[26px] font-switzerMedium text-primary">
                Create a New Survey
              </h2>

              {/* Button to trigger OpenAI-powered survey generation */}
              <button
                onClick={handleGenerateSurvey}
                disabled={loading}
                className={`mt-2 px-4 py-2 rounded text-white ${
                  loading
                    ? "bg-indigo-400 cursor-not-allowed"
                    : "bg-indigo-600 hover:bg-indigo-700"
                }`}
                title={loading ? "Generating..." : "Generate Survey with AI"}
              >
                {loading ? "Generatingâ€¦" : "Generate Survey with AI"}
              </button>
            </div>
          </Header>
        </div>

        {/* Main content layout: survey builder and sidebar */}
        <div className="flex grow w-full overflow-hidden h-full">
          <div className="grow p-3 sm:p-2 w-full overflow-auto h-[calc(100vh-164px)] sm:h-[calc(100vh-192px)] md:h-[calc(100vh-192px)] lg:h-[calc(100vh-148px)] xl:h-full scrollbar-style">
            {/* Mobile view sidebar */}
            <div className="block lg:hidden">
              <CreateSurveySidebar surveySeriesId={surveySeriesId} />
            </div>

            {/* Survey builder form; inject generatedSurvey here */}
            <CreateSurvey generatedSurvey={generatedSurvey} />
          </div>

          {/* Desktop sidebar */}
          <div className="hidden lg:block min-w-[280px] p-3 max-w-[280px] overflow-auto scrollbar-style h-[calc(100vh-89px)]">
            <CreateSurveySidebar surveySeriesId={surveySeriesId} />
          </div>
        </div>
      </div>
    </DashboardLayout>
  );
};

export default CreateSurveyPage;
